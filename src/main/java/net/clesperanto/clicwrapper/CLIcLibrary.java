package net.clesperanto.clicwrapper;
import org.bridj.BridJ;
import org.bridj.CRuntime;
import org.bridj.Pointer;
import org.bridj.ann.Library;
import org.bridj.ann.Ptr;
import org.bridj.ann.Runtime;
/**
 * Wrapper for library <b>CLIc</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("CLIc") 
@Runtime(CRuntime.class) 
public class CLIcLibrary {
	static {
		BridJ.register();
	}
	/** <i>native declaration : native\includes\core\clic.hpp</i> */
	public static final int CLIC_MAJOR_VERSION = (int)(0);
	/** <i>native declaration : native\includes\core\clic.hpp</i> */
	public static final int CLIC_MINOR_VERSION = (int)(3);
	/** <i>native declaration : native\includes\core\clic.hpp</i> */
	public static final int CLIC_PATCH_VERSION = (int)(0);
	/** <i>native declaration : native\includes\core\clic.hpp</i> */
	public static final String CLIC_VERSION = (String)"0.3.0";
	/** <i>native declaration : native\includes\core\clic.hpp</i> */
	public static final int CL_HPP_TARGET_OPENCL_VERSION = (int)120;
	/** <i>native declaration : native\includes\core\clic.hpp</i> */
	public static final int CL_HPP_MINIMUM_OPENCL_VERSION = (int)120;
	/** <i>native declaration : native\includes\core\clic.hpp</i> */
	public static final int CL_TARGET_OPENCL_VERSION = (int)120;
	/**
	 * Original signature : <code>std::string GetOpenCLErrorName(cl_int)</code><br>
	 * <i>native declaration : native\includes\core\clic.hpp:5</i>
	 */
	public static CLIcLibrary.string GetOpenCLErrorName(CLIcLibrary.cl_int error) {
		return Pointer.pointerToAddress(GetOpenCLErrorName(Pointer.getPeer(error)));
	}
	@Ptr 
	protected native static long GetOpenCLErrorName(@Ptr long error);
	/**
	 * from http://www.techdarting.com/2014/01/opencl-errors.html<br>
	 * Original signature : <code>std::string GetOpenCLErrorDescription(cl_int)</code><br>
	 * <i>native declaration : native\includes\core\clic.hpp:102</i>
	 */
	public static CLIcLibrary.string GetOpenCLErrorDescription(CLIcLibrary.cl_int error) {
		return Pointer.pointerToAddress(GetOpenCLErrorDescription(Pointer.getPeer(error)));
	}
	@Ptr 
	protected native static long GetOpenCLErrorDescription(@Ptr long error);
	/**
	 * from https://github.com/Dryopes/OpenCL-Examples/blob/master/OpenCLError.cpp<br>
	 * Original signature : <code>std::string GetOpenCLErrorInfo(cl_int)</code><br>
	 * <i>native declaration : native\includes\core\clic.hpp:169</i>
	 */
	public static CLIcLibrary.string GetOpenCLErrorInfo(CLIcLibrary.cl_int error) {
		return Pointer.pointerToAddress(GetOpenCLErrorInfo(Pointer.getPeer(error)));
	}
	@Ptr 
	protected native static long GetOpenCLErrorInfo(@Ptr long error);
	/** Undefined type */
	public static interface string {
		
	};
	/** Undefined type */
	public static interface cl_int {
		
	};
}
